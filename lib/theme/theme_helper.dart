import 'package:flutter/material.dart';
import 'package:mvp/core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer.withOpacity(1),
      dividerColor: Colors.transparent,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.black900,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      dividerTheme: DividerThemeData(
        thickness: 3,
        space: 3,
        color: appTheme.gray500,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray500,
          fontSize: 16.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray40001,
          fontSize: 11.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 50.fSize,
          fontFamily: 'Exo 2',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 30.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 26.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 18.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFB6D9EC),
    primaryContainer: Color(0XFFF40F0F),
    secondary: Color(0XFFF40F0F),
    secondaryContainer: Color(0X19D9D9D9),
    tertiary: Color(0XFFF40F0F),
    tertiaryContainer: Color(0X19D9D9D9),

    // Background colors
    background: Color(0XFFF40F0F),

    // Surface colors
    surface: Color(0XFFF40F0F),
    surfaceTint: Color(0XFF292929),
    surfaceVariant: Color(0X19D9D9D9),

    // Error colors
    error: Color(0XFF292929),
    errorContainer: Color(0XFF969696),
    onError: Color(0XFF9EF9E8),
    onErrorContainer: Color(0XFF292929),

    // On colors(text colors)
    onBackground: Color(0X4CFFFFFF),
    onInverseSurface: Color(0XFF9EF9E8),
    onPrimary: Color(0XFF292929),
    onPrimaryContainer: Color(0X4CFFFFFF),
    onSecondary: Color(0X4CFFFFFF),
    onSecondaryContainer: Color(0XFF292929),
    onTertiary: Color(0X4CFFFFFF),
    onTertiaryContainer: Color(0XFF292929),

    // Other colors
    outline: Color(0XFF292929),
    outlineVariant: Color(0XFFF40F0F),
    scrim: Color(0XFFF40F0F),
    shadow: Color(0XFF292929),

    // Inverse colors
    inversePrimary: Color(0XFFF40F0F),
    inverseSurface: Color(0XFF292929),

    // Pending colors
    onSurface: Color(0X4CFFFFFF),
    onSurfaceVariant: Color(0XFF292929),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);

  // Blue
  Color get blue100 => const Color(0XFFB6D9ED);
  Color get blue500 => const Color(0XFF16A0F9);
  Color get blue50001 => const Color(0XFF149FED);
  Color get blue5099 => const Color.fromARGB(153, 201, 234, 253);
  Color get blue800 => const Color(0XFF1170AF);

  // BlueGray
  Color get blueGray100 => const Color(0XFFCCCCCC);
  Color get blueGray400 => const Color(0XFF888888);
  Color get blueGray900 => const Color(0XFF333333);
  Color get blueGray90001 => const Color(0XFF292D32);

  // Gray
  Color get gray200 => const Color(0XFFE8E8E8);
  Color get gray300 => const Color(0XFFDEDEDE);
  Color get gray400 => const Color(0XFFCAC9C9);
  Color get gray40001 => const Color(0XFFB3B3B3);
  Color get gray50 => const Color(0XFFF6FAFC);
  Color get gray500 => const Color(0XFF999999);
  Color get gray600 => const Color(0XFF767676);
  Color get gray60033 => const Color(0X33776677);
  Color get gray700 => const Color(0XFF606060);
  Color get gray70099 => const Color(0X99595959);

  // LightBlue
  Color get lightBlue100 => const Color(0XFFBAE6FF);
  Color get lightBlue50 => const Color(0XFFE4F5FF);
  Color get lightBlue500 => const Color(0XFF08A6FF);
  Color get lightBlue800 => const Color(0XFF1A7CB4);

  // Lime
  Color get lime700 => const Color(0XFFBDA348);

  // Orange
  Color get orange200 => const Color(0XFFFFC36A);
  Color get orangeA10033 => const Color(0X33FFD875);

  // Red
  Color get red100 => const Color(0XFFFCCACA);
  Color get red10001 => const Color(0XFFFDC9C9);
  Color get red50 => const Color(0XFFFEEFEF);
  Color get redA700 => const Color(0XFFFC0505);

  // White
  Color get whiteA700 => const Color(0XFFFDFDFD);
  Color get whiteA70001 => const Color(0XFFFFFEFE);

  // Yellow
  Color get yellow900 => const Color(0XFFFF7723);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
